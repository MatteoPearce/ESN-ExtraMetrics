# -*- coding: utf-8 -*-
"""
Created on Mon Aug 28 10:34:09 2023

@author: mp1432
"""

"""
script for plotting heatmaps from data generated by GenDataset_V7. Can be passed
directory (dir_path) for speedier navigating to file loc.
"""

from os import path
import matplotlib.pyplot as plt
import tkinter
from tkinter import filedialog
import numpy as np
import json
import string
import Useful_Funcs_V3 as UF

def Plot_HM (path_dir: str = None):     

#----------------------------#DATASET SELECTION#------------------------------#
        
        main_win = tkinter.Tk() 
        main_win.withdraw() # Hides Tk window
        main_win.geometry('0x0+0+0')
        main_win.deiconify()
        main_win.lift()
        main_win.focus_force()
        
        if not (path_dir is None):
            currdir = path_dir
        else:
            currdir = "C:\\"
        file = filedialog.askopenfilename(parent=main_win, 
                                          initialdir=currdir, 
                                          title= 'Please select dataset')
        if len(file) > 0:
            param_selection = file
            main_param = path.basename(path.split(file)[0])
        else:
            raise Exception("No file chosen")

        main_win.destroy()
        
            
#------------------------------#EXTRUDE DATA#---------------------------------#    

        # Opening JSON file
        f = open(rf"{param_selection}")
        test_name = path.basename(f.name)       
        data = json.load(f)
        test_bed = data[0]
        UF.Sect_Div()
        print(f"test bed: \n\n {data[0]}")
        results = data[1:]
         
        # Closing file
        f.close()

#------------------------#EXTRACT PARAMETER NAMES#----------------------------#   
        
        for index,letter in enumerate(test_name):
            if letter == ',':
                first_parameter = test_name[:index]
                second_parameter = test_name[index:]
                break

        first_parameter = [word.strip(string.punctuation) for word in first_parameter.split() if word.strip(string.punctuation).isalnum()]
        second_parameter = [word.strip(string.punctuation) for word in second_parameter.split() if word.strip(string.punctuation).isalnum()]
        
        if len(first_parameter) > 1: # if parameter comprised of two words
            dummy_list = first_parameter
            first_parameter = str()
            for word in dummy_list:
                first_parameter = first_parameter + ' ' + word
            first_parameter = first_parameter.replace(' ','',1)    
        else:
            first_parameter = first_parameter[0]
        
        if len(second_parameter) > 1: # if parameter comprised of two words
            dummy_list = second_parameter
            second_parameter = str()
            for word in dummy_list:
                second_parameter = second_parameter + ' ' + word
            second_parameter = second_parameter.replace(' ','',1)   
        else:
            second_parameter = second_parameter[0]

#---------------------------#GET SWEEP THRESHOLDS#----------------------------#
        
        first_axis = test_bed[first_parameter] # get start,stop,step from key.
        second_axis = test_bed[second_parameter]
        
        first_axis = np.arange(first_axis[0],first_axis[1]+first_axis[2],first_axis[2])
        second_axis = np.arange(second_axis[0],second_axis[1]+second_axis[2],second_axis[2])
        results = np.reshape(results,(len(first_axis),len(second_axis))) # reshape results into matrix of size first axis * second axis

#------------------------------#PREPARE LABELS#-------------------------------#
        
        labels1 = [first_axis[0]]
        labels2 = [second_axis[0]]
        
        #REMOVES BLUE BAR AT TOP IF 0:
        
        if (first_axis[0] == 0) and (second_axis[0] == 0):
            first_axis = first_axis[1:]
            second_axis = second_axis[1:]
            results = np.delete(results,0,0)
            
        for i in range(1,len(first_axis)-1):
            labels1.append('')
        for i in range(1,len(second_axis)-1):
            labels2.append('')
            
        labels1.append(first_axis[-1])
        labels2.append(second_axis[-1])

#------------------------------------#PLOT#-----------------------------------#                            
            
        fig, ax = plt.subplots()
        im = ax.imshow(results,interpolation='none')
        ax.set_xticks(np.arange(len(second_axis)), labels=labels2)
        ax.set_yticks(np.arange(len(first_axis)), labels=labels1)
        ax.set_xlabel(second_parameter)
        ax.set_ylabel(first_parameter)
        
        ax.set_title(main_param)
        ax.set_aspect((results.shape[1] / results.shape[0]))
        plt.colorbar(im)
        fig.tight_layout()
        plt.show()
        
